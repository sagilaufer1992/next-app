{"version":3,"sources":["assets/images/Logo2.png","Components/Header.js","Components/Utility/Title.js","Components/Utility/SearchInput.js","Components/Movie/MovieRating.js","Components/Utility/TextIconButton.js","Components/Movie/MovieListItem.js","Components/Movie/MovieList.js","Components/Movie/MovieModal.js","Components/Utility/LoadingModal.js","Components/Movie/MoviesDisplay.js","DataProviders/moviesProvider.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","logo","alt","Title","rows","combinedClassName","classnames","map","row","SearchInput","callback","onChange","useCallback","changeEvent","target","value","Input","id","placeholder","startAdornment","InputAdornment","position","Icon","MovieRating","rating","maxRating","_calculateRaing","TextIconButton","text","icon","iconOnLeft","onClick","disabled","combinedClassNames","classNames","Button","variant","color","startIcon","endIcon","MovieListItem","movie","selectMovie","title","image","year","released","_selectMovie","MovieList","movies","MovieModal","close","downloadMovie","openImdbLink","window","open","imdbid","focus","imdbId","synopsis","largeimage","runtime","download","timeRegex","match","hours","minutes","_extractTime","downloadEnabled","Modal","onClose","startsWith","length","LoadingModal","BackdropProps","LinearProgress","MoviesDisplay","loading","moviesPerPage","useState","selectedMovie","setSelectedMovie","page","setPage","displayedMovies","setDisplayedMovies","unselectMovie","onPageChange","_event","pageNumber","useEffect","splice","pages","Math","ceil","Pagination","count","a","fetch","method","accept","respone","json","encodedMovies","_encodeSynopsis","_replaceSpecialCharacters","sortedMovies","sort","movie1","movie2","localeCompare","getMovies","actualSynopsis","replace","TITLE_ROWS","App","allMovies","setAllMovies","setMovies","searchTerm","setSearchTerm","setLoading","alert","then","moviesResult","filteredMovies","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","rel","href","document","getElementById"],"mappings":"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","file":"static/js/main.59ca428d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Logo2.f9956a29.png\";","import logo from '../assets/images/Logo2.png';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    return <div className=\"header\">\r\n        <img src={logo} className=\"logo\" alt=\"logo\" />\r\n    </div>;\r\n}\r\n\r\nexport default Header;\r\n","import './Title.css';\r\n\r\nimport classnames from \"classnames\";\r\n\r\nfunction Title({ rows, className }) {\r\n    const combinedClassName = classnames(\"title\", className)\r\n    return rows.map(row => <div key={row} className={combinedClassName}>\r\n        {row}\r\n    </div>);\r\n}\r\n\r\nexport default Title;\r\n","import './SearchInput.css';\r\n\r\nimport Input from '@material-ui/core/Input';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { useCallback } from \"react\";\r\nimport { Icon } from '@material-ui/core';\r\n\r\nfunction SearchInput({ callback }) {\r\n    const onChange = useCallback((changeEvent) => callback(changeEvent.target.value), [callback])\r\n\r\n    return (\r\n        <div className=\"search-input\">\r\n            <Input\r\n                id=\"input-with-icon-adornment\"\r\n                placeholder=\"search\"\r\n                onChange={onChange}\r\n                startAdornment={\r\n                    <InputAdornment position=\"start\">\r\n                        <Icon >search</Icon>\r\n                    </InputAdornment>\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchInput;\r\n","import \"./MovieRating.css\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n\r\nfunction MovieRating({ rating, maxRating }) {\r\n    return <div className=\"rating-container\">\r\n        <Icon>star</Icon>\r\n        <div className=\"rating-score\">\r\n            {rating === \"\" ? \"none\" : _calculateRaing(rating, maxRating)}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default MovieRating\r\n\r\nfunction _calculateRaing(rating, maxRating) {\r\n    if (maxRating) return `${rating}/${maxRating}`;\r\n\r\n    return `${rating}`;\r\n}","import \"./TextIconButton.css\";\r\n\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport classNames from \"classnames\";\r\n\r\nfunction TextIconButton({ text, icon, iconOnLeft, onClick, className, disabled }) {\r\n    const combinedClassNames = classNames(className, \"text-icon-button\");\r\n\r\n    return <Button\r\n        variant=\"outlined\"\r\n        color=\"inherit\"\r\n        className={combinedClassNames}\r\n        startIcon={iconOnLeft && <Icon>{icon}</Icon>}\r\n        endIcon={!iconOnLeft && <Icon>{icon}</Icon>}\r\n        onClick={onClick}\r\n        disabled={disabled}\r\n    >\r\n        {text}\r\n    </Button>\r\n}\r\n\r\nexport default TextIconButton;","import './MovieListItem.css';\r\n\r\nimport MovieRating from \"./MovieRating\";\r\nimport TextIconButton from '../Utility/TextIconButton';\r\n\r\nimport { useCallback } from 'react';\r\n\r\nfunction MovieListItem({ movie, selectMovie }) {\r\n    const { title, image, rating, released: year } = movie;\r\n    const _selectMovie = useCallback(() => selectMovie(movie), [movie, selectMovie]);\r\n\r\n    return <div className=\"movie-list-item\">\r\n        <img className={\"movie-image\"} src={image} title={title} alt={title}></img>\r\n        <div className=\"movie-title\">\r\n            {title} ({year})\r\n        </div>\r\n        <MovieRating rating={rating} />\r\n        <TextIconButton\r\n            text=\"Read More\"\r\n            icon=\"arrow_right_alt\"\r\n            iconOnLeft={false}\r\n            onClick={_selectMovie}\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default MovieListItem;\r\n","import './MovieList.css';\r\n\r\nimport MovieListItem from './MovieListItem';\r\n\r\nfunction MovieList({ movies, selectMovie }) {\r\n    return <div className=\"movie-list\">\r\n        {movies === null ? \"loading\" : movies.map(movie =>\r\n            <MovieListItem key={movie.id} movie={movie} selectMovie={selectMovie} />\r\n        )}\r\n    </div>;\r\n}\r\n\r\nexport default MovieList;\r\n","import './MovieModal.css';\r\nimport Title from \"../Utility/Title\";\r\n\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport TextIconButton from '../Utility/TextIconButton';\r\nimport MovieRating from './MovieRating';\r\nimport { useCallback } from 'react';\r\n\r\nfunction MovieModal({ movie, close, downloadMovie }) {\r\n    const openImdbLink = useCallback(() => {\r\n        window.open(\"https://www.imdb.com/title/\" + _getImdbId(movie), '_blank').focus();\r\n    }, [movie]);\r\n\r\n    if (!movie) return null;\r\n\r\n    const { synopsis, title, largeimage: image, runtime, rating, imdbid, download } = movie;\r\n    const [hours, minutes] = _extractTime(runtime);\r\n    const downloadEnabled = download === \"1\"; // possible values are \"1\", \"0\" and \"\" by the data from the server\r\n\r\n    return <Modal\r\n        open={true}\r\n        onClose={close}\r\n        className=\"modal-container\"\r\n    >\r\n        <div className=\"movie-modal-content\">\r\n            <div className=\"movie-left-region\">\r\n                <img className=\"movie-large-image\" src={image} alt={title} title={title}></img>\r\n            </div>\r\n            <div className=\"movie-right-region\">\r\n                <div className=\"movie-details\">\r\n                    <Title rows={[title]} />\r\n                    <Title rows={[`${hours}h ${minutes}min`]} className=\"small\" />\r\n                    <MovieRating rating={rating} maxRating={10} />\r\n                    <div className=\"synopsis\">\r\n                        {synopsis}\r\n                    </div>\r\n                    <div className=\"action-buttons\">\r\n                        {_isImdbIdValid(imdbid) && <div className=\"imdb-link\">\r\n                            <TextIconButton\r\n                                icon=\"movie_filter\"\r\n                                text=\"View on IMDB\"\r\n                                iconOnLeft={true}\r\n                                onClick={openImdbLink}\r\n                                className=\"imdb-button\"\r\n                            />\r\n                        </div>}\r\n                        <TextIconButton\r\n                            icon=\"system_update_alt\"\r\n                            text=\"Download\"\r\n                            iconOnLeft={true}\r\n                            onClick={downloadMovie}\r\n                            disabled={!downloadEnabled}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <TextIconButton\r\n                    icon=\"keyboard_backspace\"\r\n                    text=\"Back To List\"\r\n                    iconOnLeft={true}\r\n                    onClick={close}\r\n                    className=\"back-button\"\r\n                />\r\n            </div>\r\n        </div >\r\n    </Modal>;\r\n}\r\n\r\nexport default MovieModal;\r\n\r\nfunction _extractTime(runtime) {\r\n    const timeRegex = /(\\d*)h(\\d*)m/;\r\n    const [, hours, minutes] = runtime.match(timeRegex);\r\n    return [hours, minutes];\r\n}\r\n\r\nfunction _getImdbId({ imdbid }) {\r\n    return imdbid;\r\n}\r\n\r\nfunction _isImdbIdValid(imdbId) {\r\n    return imdbId.startsWith(\"tt\") && imdbId.length === 9;\r\n}","import './LoadingModal.css';\r\n\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { Modal } from '@material-ui/core';\r\nimport Title from './Title';\r\n\r\nfunction LoadingModal() {\r\n    return <Modal\r\n        open\r\n        className=\"loading-modal\"\r\n        BackdropProps={{\r\n            className: \"loading-backdrop\"\r\n        }}\r\n    >\r\n        <div className=\"progress-container\">\r\n            <Title rows={[\"Loading...\"]} />\r\n            <LinearProgress className=\"linear-progress\" />\r\n        </div>\r\n    </Modal>\r\n}\r\n\r\nexport default LoadingModal;\r\n","import './MoviesDisplay.css';\r\n\r\nimport MovieList from \"./MovieList\";\r\nimport MovieModal from \"./MovieModal\";\r\n\r\nimport { useState, useCallback, useEffect } from \"react\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport LoadingModal from '../Utility/LoadingModal';\r\n\r\nfunction MoviesDisplay({ movies, loading, moviesPerPage, downloadMovie }) {\r\n    const [selectedMovie, setSelectedMovie] = useState(null);\r\n    const [page, setPage] = useState(1);\r\n    const [displayedMovies, setDisplayedMovies] = useState([])\r\n\r\n    const unselectMovie = useCallback(() => setSelectedMovie(null), [setSelectedMovie]);\r\n    const onPageChange = useCallback((_event, pageNumber) => setPage(pageNumber), [setPage]);\r\n\r\n    useEffect(() => {\r\n        setPage(1);\r\n    }, [movies]);\r\n\r\n    useEffect(() => {\r\n        if (!movies) return;\r\n\r\n        setDisplayedMovies([...movies].splice((page - 1) * moviesPerPage, moviesPerPage))\r\n    }, [page, movies, moviesPerPage]);\r\n\r\n    const pages = movies ? Math.ceil(movies.length / moviesPerPage) : 0;\r\n\r\n    return <>\r\n        {loading ? <LoadingModal /> :\r\n            <>\r\n                <MovieList movies={displayedMovies} selectMovie={setSelectedMovie} />\r\n                <Pagination\r\n                    count={pages}\r\n                    page={page}\r\n                    onChange={onPageChange}\r\n                    className=\"pagination\"\r\n                />\r\n                <MovieModal movie={selectedMovie} close={unselectMovie} downloadMovie={downloadMovie} />\r\n            </>}\r\n    </>\r\n}\r\n\r\nexport default MoviesDisplay;\r\n","import fetch from \"node-fetch\";\r\n\r\nasync function getMovies() {\r\n    const respone = await fetch(\"http://localhost:3000/movies\", {\r\n        method: \"GET\",\r\n        accept: \"application/json\"\r\n    });\r\n    const movies = await respone.json();\r\n\r\n    const encodedMovies = movies.map(movie => ({\r\n        ...movie,\r\n        synopsis: _encodeSynopsis(movie.synopsis),\r\n        title: _replaceSpecialCharacters(movie.title)\r\n    }));\r\n\r\n    const sortedMovies = encodedMovies.sort((movie1, movie2) => movie1.title.localeCompare(movie2.title));\r\n\r\n    return sortedMovies;\r\n}\r\n\r\nexport default getMovies;\r\n\r\nfunction _encodeSynopsis(synopsis) {\r\n    const trailingTextRegex = /(.*)(<br>.*)/; // all the synopsises end with <br><b>some date</b>\r\n    const actualSynopsis = synopsis.match(trailingTextRegex)[1];\r\n\r\n    // replace html special characters with regular characters\r\n    return _replaceSpecialCharacters(actualSynopsis);\r\n}\r\n\r\nfunction _replaceSpecialCharacters(actualSynopsis) {\r\n    return actualSynopsis.replace(/&amp;/g, \"&\").replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\").replace(/&quot;/g, \"\\\"\").replace(/&#39;/g, \"'\");\r\n}\r\n","import './App.css';\nimport Header from \"./Header\";\nimport Title from \"./Utility/Title\";\nimport SearchInput from \"./Utility/SearchInput\";\nimport MoviesDisplay from './Movie/MoviesDisplay';\n\nimport getMovies from \"../DataProviders/moviesProvider\"\n\nimport { useEffect, useState, useCallback } from \"react\";\n\nconst TITLE_ROWS = [\"explore your next\", \"movies and tv shows\"];\nconst MOVIES_PER_PAGE = 6;\n\nfunction App() {\n  const [allMovies, setAllMovies] = useState(null);\n  const [movies, setMovies] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  const downloadMovie = useCallback(movie => alert(\"Downloading is not yet supported\"), []);\n\n  // load movies\n  useEffect(() => {\n    getMovies().then(moviesResult => {\n      setAllMovies(moviesResult);\n      setMovies(moviesResult);\n      setLoading(false);\n    })\n  }, []);\n\n  // callback for searching\n  useEffect(() => {\n    if (!allMovies) return;\n\n    const filteredMovies = allMovies.filter(movie => movie.title.toLowerCase().includes(searchTerm.toLowerCase()));\n    setMovies(filteredMovies);\n  }, [searchTerm, allMovies])\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <Title rows={TITLE_ROWS} />\n      <div className=\"app-content\">\n        <SearchInput callback={setSearchTerm} />\n        <MoviesDisplay movies={movies} loading={loading} moviesPerPage={MOVIES_PER_PAGE} downloadMovie={downloadMovie} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}